/*******************************************************************************
 * Copyright (C) 2016, International Business Machines Corporation
 * All Rights Reserved
 *******************************************************************************/

namespace com.ibm.streamsx.speech2text.callcenter.speechprocessing.watsons2t;  
  
use com.ibm.streams.speech2text.watson::*; 
use com.ibm.streamsx.topology.topic::*; 
use com.ibm.streamsx.speech2text.callcenter.types::*;


type bestUtterance = tuple<rstring id, rstring channel_id
			, float64 utteranceStartTime, float64 utteranceEndTime
			,  uint32 rtpStreamStartTime,  int32 utteranceNumber
			, rstring utterance, float64 utteranceConfidence
			, list<float64> utteranceTokenConfidences
			, boolean rtpStreamComplete
			/* , list<int32> utteranceSpeakers
			, list<rstring> nBestHypotheses*/> ;

composite WatsonSpeech2Text
{
	param
		expression<rstring> $paramsetFile : getSubmissionTimeValue("paramsetFile") ;
		expression<rstring> $packageFile : getSubmissionTimeValue("packageFile") ;
		expression<rstring> $utterances : getSubmissionTimeValue("utterances") ;
		expression<rstring> $diagnostics : getSubmissionTimeValue("diagnostics") ;
		expression<rstring> $watsonJobId : getSubmissionTimeValue("watsonJobId") ;
		expression<int32> $numWatsonEngines :(int32)
			getSubmissionTimeValue("numWatsonEngines") ;
		expression<rstring> $callCenter : getSubmissionTimeValue("callCenter") ;
		
	type
		Utterance_File = tuple<rstring ipaddress, rstring startingTime,
			rstring callCenter, int32 utteranceNumber, float64 utteranceStartTime,
			float64 utteranceEndTime, uint32 rtpStreamStartTime, rstring role,
			rstring utterance, int32 speakerId, boolean rtpStreamComplete> ;
	graph
		stream<AudioPacket> Imported_Utterances = Subscribe()
		{
			param
				topic : "Import_Utterances" + $watsonJobId ;
				streamType : tuple<rstring id, rstring channel_id, uint32 ssrc, uint32 ts,
					uint32 rtpStreamStartTime, blob speech, int32 samples, int32 jobId,
					uint32 hostId> ;
		}

		stream<rstring id, rstring channel_id, uint32 ssrc, uint32 ts,
			uint32 rtpStreamStartTime, blob speech, int32 samples, int32 jobId,
			uint32 hostId> Imported2_Utterances = Functor(Imported_Utterances)
		{
		}

		@parallel(width = $numWatsonEngines, partitionBy = [ { port =
			Imported2_Utterances, attributes = [ jobId ] } ])
		(stream<bestUtterance> Utterances ; stream<rstring log> Diagnostics) =
			SpeechToText(Imported2_Utterances)
		{
			param
				paramsetFile : $paramsetFile ;
				packageFile : $packageFile ;
		}

		(stream<Utterance> Utterance_Data ; stream<Utterance_File>
			UtteranceFileStream) = Custom(Utterances)
		{
			logic
				onTuple Utterances :
				{
					list<rstring> tokens = tokenize(id, "_", true) ;
					if(length(channel_id) > 0)
					{
					// mutable rstring tempUtterance = utterance;
						submit({ callId = $callCenter + "_" + id, utteranceNumber =
							utteranceNumber, utteranceStartTime = utteranceStartTime,
							utteranceEndTime = utteranceEndTime, rtpStreamStartTime = rtpStreamStartTime,
							role = "AGENT", utterance = utterance, speakerId =(int32) channel_id,
							callCenter = $callCenter, utteranceConfidence = utteranceConfidence,
							utteranceTokenConfidences = utteranceTokenConfidences, 
							rtpStreamComplete = rtpStreamComplete 
							/*,
                    		utteranceSpeakers = utteranceSpeakers, nBestHypotheses = nBestHypotheses */
						}, Utterance_Data) ;
						if(size(tokens) > 1)
						{
							submit({ ipaddress = tokens [ 0 ], startingTime = tokens [ 1 ],
								callCenter = $callCenter, utteranceNumber = utteranceNumber,
								utteranceStartTime = utteranceStartTime, utteranceEndTime =
								utteranceEndTime, rtpStreamStartTime = rtpStreamStartTime, role = "AGENT",
								utterance = utterance, speakerId =(int32) channel_id,
								rtpStreamComplete = rtpStreamComplete},
								UtteranceFileStream) ;
						}

						else
						{
							appTrc(Trace.info, "Call id didn't split well: " +(rstring)
								Utterances) ;
						}

					}

					else
					{
						appTrc(Trace.info, "Channel_id empty as we release." +(rstring)
							Utterances) ;
					}

				}

		}

		// jmsjms : This export needs to eventually go away and be replaced with a messging system 
		() as ExportFileOutput = Export(Utterance_Data)
		{
			param
				properties : { topic = "Utterance_Data" } ;
		}

		() as FileOutput = FileSink(UtteranceFileStream)
		{
			param
				file : $utterances + "outUtterances" + $watsonJobId +
					"_{localtime:%m%d%y}_{id}.csv" ;
				format : csv ;
				closeMode : time ;
				timePerFile : 86000.0f ;
				flush : 10u ;
		}

		() as FileDiagnostics = FileSink(Diagnostics)
		{
			param
				file : $diagnostics + "Diagnostics" + $watsonJobId +
					"_{localtime:%m%d%y}_{id}.csv" ;
				format : csv ;
				closeMode : time ;
				timePerFile : 86000.0f ;
				flush : 10u ;
		}

	config
		hostPool : P1 = createPool({ tags = [ "watsonJob" ] }, Sys.Shared) ;
		placement : host(P1) ;
}

composite SpeechToText(input inp ; output Utterances, Debug)
{
	param
		expression<rstring> $paramsetFile ;
		expression<rstring> $packageFile ;
	graph
		(stream<bestUtterance> Utterances ; stream<rstring log> Debug) =
			WatsonS2T(inp)
		{
			param
				watsonConfigFile : $paramsetFile ;
				watsonModelFile : $packageFile ;
				resetOnIdChange : true ;
			output
				Utterances : utteranceStartTime = getUtteranceStartTime(),
					utteranceEndTime = getUtteranceEndTime(), utteranceNumber =
					getUtteranceNumber(), utterance = getUtteranceText(),
					utteranceConfidence = getUtteranceConfidence(),
					utteranceTokenConfidences = getUtteranceWordConfidences(),
					rtpStreamComplete = transcriptionComplete()
					/*,
			           					 utteranceSpeakers = getUtteranceSpeakers(), 
			           					 nBestHypotheses = getNBestHypotheses() */ ;
				Debug : log = getDiagnosticsMessage() ;
			config
				threadedPort : queue(inp, Sys.DropLast, 10000) ;
				placement : partitionExlocation("WatsonS2T") ;
		}

}




