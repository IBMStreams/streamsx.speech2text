namespace com.ibm.streamsx.speech2text.callcenter.test.speechprocessing ;

use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.ipv6::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.speech2text.callcenter.types::* ;

composite PacketSimulator
{
	param
		expression<uint32> $connPort :(uint32) getSubmissionTimeValue("connPort") ;
		expression<rstring> $PcapFileDir : getSubmissionTimeValue("pcapFileDir") ;
		expression<float64> $packetRate :(float64) getSubmissionTimeValue("packetRate", "100000") ;
	graph
		stream<rstring filename> TestFile = DirectoryScan()
		{
			param
				directory : $PcapFileDir ;
				pattern : "\\.pcap$" ;
				initDelay : 5.0 ;
		}

		stream<PacketType> PacketStream as Out = PacketFileSource(TestFile)
		{
			output
				Out : ipSrcAddr = convertIPV4AddressNumericToString(IPV4_SRC_ADDRESS()),
					IP_DST_PORT = IP_DST_PORT(), IP_PROTOCOL = IP_PROTOCOL(),
					rtpStreamStartTime =(uint32) getSeconds(getTimestamp()), PAYLOAD_DATA =
					PAYLOAD_DATA(), PAYLOAD_LENGTH = PAYLOAD_LENGTH() ;
		}
		
		stream<PacketType> ThrottledPackets = Throttle(PacketStream)
		{
			param
				rate : $packetRate ;
		}

//		() as TcpSink_PacketStream = TCPSink(ThrottledPackets)
//		{
//			param
//				role : server ;
//				port : $connPort ;
//				format : csv ;
//			config
//				threadedPort : queue(ThrottledPackets, Sys.Wait, 1000000) ;
//		}

		() as PacketExport = Export(ThrottledPackets)
		{
			param
				properties : { topic = "networkPackets" } ;

		}


}
